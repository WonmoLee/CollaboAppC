{"version":3,"sources":["../src/BaseUpdater.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEM,MAAgB,WAAhB,SAAoC,wBAApC,CAA8C;AAIlD,EAAA,WAAA,CAAsB,OAAtB,EAA0D,GAA1D,EAA0E;AACxE,UAAM,OAAN,EAAe,GAAf;AAJQ,SAAA,oBAAA,GAAuB,KAAvB;AACF,SAAA,gBAAA,GAAmB,KAAnB;AAIP;;AAEK,EAAA,cAAN,CAAqB,QAAA,GAAoB,KAAzC,EAAgD,eAAA,GAA2B,KAA3E,EAAgF;AAAA;;AAAA;AAC9E,MAAA,KAAI,CAAC,OAAL,CAAa,IAAb,CAAkB,oCAAlB;;AACA,YAAM,WAAW,SAAS,KAAI,CAAC,OAAL,CAAa,QAAb,EAAuB,QAAQ,GAAG,eAAH,GAAqB,IAApD,CAA1B;;AACA,UAAI,WAAJ,EAAiB;AACf,QAAA,YAAY,CAAC,MAAK;AAChB,UAAA,KAAI,CAAC,GAAL,CAAS,IAAT;AACD,SAFW,CAAZ;AAGD,OAJD,MAKK;AACH,QAAA,KAAI,CAAC,oBAAL,GAA4B,KAA5B;AACD;AAV6E;AAW/E;;AAES,EAAA,eAAe,CAAC,WAAD,EAAkC;AAAA;;AACzD,WAAO,MAAM,eAAN,CAAqB,MAAA,CAAA,MAAA,CAAA,EAAA,EACvB,WADuB,EACZ;AACd,MAAA,IAAI;AAAA,iDAAE,WAAM,KAAN,EAAc;AAClB,UAAA,MAAI,CAAC,wBAAL,CAA8B,KAA9B;;AACA,UAAA,MAAI,CAAC,cAAL;AACD,SAHG;;AAAA;AAAA;AAAA;AAAA;AADU,KADY,CAArB,CAAP;AAOD,GA7BiD,CAkClD;;;AACU,EAAA,OAAO,CAAC,QAAD,EAAoB,UAApB,EAAuC;AACtD,QAAI,KAAK,oBAAT,EAA+B;AAC7B,WAAK,OAAL,CAAa,IAAb,CAAkB,2DAAlB;;AACA,aAAO,KAAP;AACD;;AAED,UAAM,aAAa,GAAG,KAAK,sBAAL,IAA+B,IAA/B,GAAsC,IAAtC,GAA6C,KAAK,sBAAL,CAA4B,IAA/F;;AACA,QAAI,aAAa,IAAI,IAArB,EAA2B;AACzB,WAAK,aAAL,CAAmB,IAAI,KAAJ,CAAU,mDAAV,CAAnB;AACA,aAAO,KAAP;AACD,KAVqD,CAYtD;;;AACA,SAAK,oBAAL,GAA4B,IAA5B;;AAEA,QAAI;AACF,WAAK,OAAL,CAAa,IAAb,CAAkB,sBAAsB,QAAQ,iBAAiB,UAAU,EAA3E;;AACA,aAAO,KAAK,SAAL,CAAe,aAAf,EAA8B,QAA9B,EAAwC,UAAxC,CAAP;AACD,KAHD,CAIA,OAAO,CAAP,EAAU;AACR,WAAK,aAAL,CAAmB,CAAnB;AACA,aAAO,KAAP;AACD;AACF;;AAES,EAAA,cAAc,GAAA;AACtB,QAAI,KAAK,gBAAL,IAAyB,CAAC,KAAK,oBAAnC,EAAyD;AACvD;AACD;;AAED,SAAK,gBAAL,GAAwB,IAAxB;AAEA,SAAK,GAAL,CAAS,MAAT,CAAgB,QAAQ,IAAG;AACzB,UAAI,KAAK,oBAAT,EAA+B;AAC7B,aAAK,OAAL,CAAa,IAAb,CAAkB,oEAAlB;;AACA;AACD;;AAED,UAAI,QAAQ,KAAK,CAAjB,EAAoB;AAClB,aAAK,OAAL,CAAa,IAAb,CAAkB,uFAAuF,QAAQ,EAAjH;;AACA;AACD;;AAED,WAAK,OAAL,CAAa,IAAb,CAAkB,6BAAlB;;AACA,WAAK,OAAL,CAAa,IAAb,EAAmB,KAAnB;AACD,KAbD;AAcD;;AAjFiD,C","sourcesContent":["import { AllPublishOptions } from \"builder-util-runtime\"\nimport { AppAdapter } from \"./AppAdapter\"\nimport { AppUpdater, DownloadExecutorTask } from \"./AppUpdater\"\n\nexport abstract class BaseUpdater extends AppUpdater {\n  protected quitAndInstallCalled = false\n  private quitHandlerAdded = false\n\n  protected constructor(options?: AllPublishOptions | null, app?: AppAdapter) {\n    super(options, app)\n  }\n\n  async quitAndInstall(isSilent: boolean = false, isForceRunAfter: boolean = false): Promise<void> {\n    this._logger.info(`Install on explicit quitAndInstall`)\n    const isInstalled = await this.install(isSilent, isSilent ? isForceRunAfter : true)\n    if (isInstalled) {\n      setImmediate(() => {\n        this.app.quit()\n      })\n    }\n    else {\n      this.quitAndInstallCalled = false\n    }\n  }\n\n  protected executeDownload(taskOptions: DownloadExecutorTask): Promise<Array<string>> {\n    return super.executeDownload({\n      ...taskOptions,\n      done: async event => {\n        this.dispatchUpdateDownloaded(event)\n        this.addQuitHandler()\n      }\n    })\n  }\n\n  // must be sync\n  protected abstract doInstall(installerPath: string, isSilent: boolean, isRunAfter: boolean): boolean\n\n  // must be sync (because quit even handler is not async)\n  protected install(isSilent: boolean, isRunAfter: boolean): boolean {\n    if (this.quitAndInstallCalled) {\n      this._logger.warn(\"install call ignored: quitAndInstallCalled is set to true\")\n      return false\n    }\n\n    const installerPath = this.downloadedUpdateHelper == null ? null : this.downloadedUpdateHelper.file\n    if (installerPath == null) {\n      this.dispatchError(new Error(\"No valid update available, can't quit and install\"))\n      return false\n    }\n\n    // prevent calling several times\n    this.quitAndInstallCalled = true\n\n    try {\n      this._logger.info(`Install: isSilent: ${isSilent}, isRunAfter: ${isRunAfter}`)\n      return this.doInstall(installerPath, isSilent, isRunAfter)\n    }\n    catch (e) {\n      this.dispatchError(e)\n      return false\n    }\n  }\n\n  protected addQuitHandler() {\n    if (this.quitHandlerAdded || !this.autoInstallOnAppQuit) {\n      return\n    }\n\n    this.quitHandlerAdded = true\n\n    this.app.onQuit(exitCode => {\n      if (this.quitAndInstallCalled) {\n        this._logger.info(\"Update installer has already been triggered. Quitting application.\")\n        return\n      }\n\n      if (exitCode !== 0) {\n        this._logger.info(`Update will be not installed on quit because application is quitting with exit code ${exitCode}`)\n        return\n      }\n\n      this._logger.info(\"Auto install update on quit\")\n      this.install(true, false)\n    })\n  }\n}"],"sourceRoot":""}
